import numpy as np
import random 

servers = "SERVER-A SERVER-B SERVER-C SERVER-D".split()
print(f"Available servers : {servers}")

requests = 20
for request in range(requests):
    print(f"Request[{request}] allocated server : {np.random.choice(servers)}")

class LoadBalancer:
    def __init__(self, servers):
        self.servers = servers

    def random_selection(self):
        return random.choice(self.servers)

def simulate_client_requests(load_balancer, num_requests):
    for i in range(num_requests):
        print(f"Request {i+1}: ", end="")
        # Using Random algorithm for load balancing
        server_random = load_balancer.random_selection()
        print(f"Random - Server {server_random}")

servers = ["Server A", "Server B", "Server C"]
# Create a LoadBalancer instance
load_balancer = LoadBalancer(servers)
# Simulate 10 client requests
simulate_client_requests(load_balancer, 10)


class LoadBalancer():
    def __init__(self, servers):
        self.servers = servers
        
    def random_selections(self):
        return np.random.choice(self.servers)
    
def stimualate_client_requests(lb , requests):
    for req in range(requests):
        random_server = lb.random_selections()
        print(f"{req+1} | {random_server}")
        
        
servers = "SERVER-A SERVER-B SERVER-C SERVER-D".split()

lb = LoadBalancer(servers)

stimualate_client_requests(lb, 10)